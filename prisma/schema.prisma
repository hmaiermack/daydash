// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    tasks Task[]
    habits Habit[]
    completedHabits CompletedHabit[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Task {
  id String @id @default(cuid())

  title     String
  timeStart DateTime
  timeEnd   DateTime

  user   User @relation(fields: [userId], references: [id])
  userId String

  tag   Tag? @relation(fields: [tagId], references: [id])
  tagId String?


  @@index([timeStart, timeEnd])
  @@map("tasks")
}



model Tag {
  id String @id @default(cuid())

  name String @unique

  colorHexValue String @default("#5F5F5F")

  tasks Task[]

  @@map("tags")
}

model Habit {
  id String @id @default(cuid())

  name String
  habitDays Boolean[]
  remindTime String?
  remindDays Boolean[]

  user User @relation(fields: [userId], references: [id])
  userId String

  completedHabits CompletedHabit[]

  @@unique([name, userId])
  @@map("habits")
}

model CompletedHabit {
  id String @id @default(cuid())
  dateCompleted DateTime @default(now())

  habit Habit @relation(fields: [habitId], references: [id])
  habitId String

  user User @relation(fields: [userId], references: [id])
  userId String

  @@index([dateCompleted])
  @@map("completedHabits")
}